本机32GB内存
win 10
jdk 1.8
==========================
PS C:\Users\Nansh> jmap -heap 40812
Attaching to process ID 40812, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.201-b09

using thread-local object allocation.
Garbage-First (G1) GC with 8 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 40
   MaxHeapFreeRatio         = 70
   MaxHeapSize              = 8558477312 (8162.0MB)                           32G * 1/4
   NewSize                  = 1363144 (1.2999954223632812MB)
   MaxNewSize               = 5133828096 (4896.0MB)                            8162 * 0.6
   OldSize                  = 5452592 (5.1999969482421875MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 2097152 (2.0MB)                                 8162 / 4081 = 2.0 MB

Heap Usage:
G1 Heap:
   regions  = 4081
   capacity = 8558477312 (8162.0MB)
   used     = 31885656 (30.408531188964844MB)
   free     = 8526591656 (8131.591468811035MB)
   0.37256225421422257% used
G1 Young Generation:
Eden Space:
   regions  = 7
   capacity = 23068672 (22.0MB)
   used     = 14680064 (14.0MB)                                             2MB per region, 2*7 = 14
   free     = 8388608 (8.0MB)
   63.63636363636363% used
Survivor Space:
   regions  = 1
   capacity = 2097152 (2.0MB)
   used     = 2097152 (2.0MB)
   free     = 0 (0.0MB)
   100.0% used
G1 Old Generation:
   regions  = 9
   capacity = 25165824 (24.0MB)
   used     = 15108440 (14.408531188964844MB)
   free     = 10057384 (9.591468811035156MB)
   60.03554662068685% used

4914 interned Strings occupying 387312 bytes.
PS C:\Users\Nansh>

====================
以下是jstat, 40812和13836 是同样的程序.

40812 用G1GC
13836 不指定，使用java8默认的并行GC

程序运行时间基本一致，可以看出并行gc的程序 发生gc的次数较多 平均每次ygc 1.5毫秒；而G1 gc平均每次2毫秒左右（更久）
但是总的GC时间上G1 花的更少

同样在下图中可以看到G1 GC下，Survivor区的数据交换远比并行gc的要少 （0次 对比 4次）

PS C:\Users\Nansh> jps
39968 Jps
39764 Launcher
25992
13836 GCDemo
35308 Application
40812 GCDemo
PS C:\Users\Nansh> jstat -gcutil 13836 1000 1000
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
 56.25   0.00  46.01   1.56  94.88  86.69    106    0.168     0    0.000    0.168
  0.00  46.88  76.42   1.57  94.88  86.69    107    0.169     0    0.000    0.169
  0.00  62.50   6.03   1.60  94.89  86.69    109    0.172     0    0.000    0.172
 68.75   0.00  36.00   1.61  94.89  86.69    110    0.173     0    0.000    0.173
  0.00   6.25  66.00   1.62  94.89  86.69    111    0.174     0    0.000    0.174
 75.00   0.00  95.83   1.62  94.89  86.69    112    0.175     0    0.000    0.175
 75.00   0.00  25.97   1.64  94.89  86.69    114    0.177     0    0.000    0.177
  0.00  12.50  55.94   1.64  94.89  86.69    115    0.178     0    0.000    0.178
 75.00   0.00  85.92   1.65  94.90  86.69    116    0.180     0    0.000    0.180
 93.75   0.00  16.01   1.66  94.90  86.69    118    0.182     0    0.000    0.182
  0.00  31.25   0.00   1.67  94.90  86.69    119    0.184     0    0.000    0.184
PS C:\Users\Nansh> jstat -gcutil 40812 1000 1000
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  0.00 100.00  93.75   1.04  94.70  86.70     27    0.067     0    0.000    0.067
  0.00 100.00  15.62   0.94  94.70  86.70     28    0.069     0    0.000    0.069
  0.00 100.00  32.50   0.94  94.70  86.70     28    0.069     0    0.000    0.069
  0.00 100.00  48.75   0.94  94.70  86.70     28    0.069     0    0.000    0.069
  0.00 100.00  57.50   0.94  94.70  86.70     28    0.069     0    0.000    0.069
  0.00 100.00  74.37   0.94  94.70  86.70     28    0.069     0    0.000    0.069
  0.00 100.00  91.25   0.94  94.70  86.70     28    0.069     0    0.000    0.069
  0.00 100.00  13.12   0.94  94.72  86.70     29    0.071     0    0.000    0.071
  0.00 100.00  29.37   0.94  94.72  86.70     29    0.071     0    0.000    0.071
  0.00 100.00  46.25   0.94  94.72  86.70     29    0.071     0    0.000    0.071
  0.00 100.00  63.12   0.94  94.72  86.70     29    0.071     0    0.000    0.071
PS C:\Users\Nansh>

===
同样的利用jconsole执行强制full GC后，可以看出
尽管在full GC前 使用G1 GC的jvm堆内存使用更大， 但是在full GC并稳定后 堆内存使用显著的减少了。而并行GC的jvm的堆内存，只是常规性的减少了一部分堆内存使用，随后回到原来的使用水平上。